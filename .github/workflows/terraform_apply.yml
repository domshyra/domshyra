# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: azure

on:
    push:
        branches:
            - main
        paths:
            - .azure/**
            - .github/workflows/terraform_apply.yml
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

jobs:
    terraform:
        name: "Terraform"
        runs-on: ubuntu-latest

        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        defaults:
            run:
                shell: bash
                working-directory: .azure

        steps:
            # Checkout the repository to the GitHub Actions runner
            - name: Checkout
              uses: actions/checkout@v4

            # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                  terraform_wrapper: false

            - name: Azure Login
              uses: azure/login@v2
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }} # save these as the federal credentials with no quotes
                tenant-id: ${{ secrets.AZURE_TENANT_ID }} 
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
            - name: Terraform Init
              run: terraform init

            # - name: terraform-plan-storage
            #   # You may pin to the exact commit or the version.
            #   # uses: cloudposse/github-action-terraform-plan-storage@55b5d342c1eefee79e661b2709e91b19b4361c6d
            #   uses: cloudposse/github-action-terraform-plan-storage@1.14.0
            #   with:
            #     # which action to perform. Valid values are: 'storePlan', 'getPlan', 'taintPlan'
            #     action: # default is storePlan
            #     # the name of the Azure Blob Storage account to store the plan file
            #     blobAccountName: # optional
            #     # the name of the Azure Blob Storage container to store the plan file
            #     blobContainerName: # optional
            #     # the name of the S3 bucket to store the plan file
            #     bucketName: # optional, default is terraform-plan-storage
            #     # Commit SHA to use for fetching plan
            #     commitSHA: # optional, default is 
            #     # the name of the component corresponding to the plan file
            #     component: # optional
            #     # the connection string to the CosmosDB account to store the metadata
            #     cosmosConnectionString: # optional
            #     # the name of the CosmosDB container to store the metadata
            #     cosmosContainerName: # optional
            #     # the name of the CosmosDB database to store the metadata
            #     cosmosDatabaseName: # optional
            #     # the endpoint of the CosmosDB account to store the metadata
            #     cosmosEndpoint: # optional
            #     # Fail if plan is missing
            #     failOnMissingPlan: true
            #     # the type of repository where the plan file is stored. Valid values are: 'dynamo', 'cosmodb'
            #     metadataRepositoryType: # optional, default is dynamo
            #     # path to the Terraform plan file. Required for 'storePlan' and 'getPlan' actions
            #     planPath: # optional
            #     # the type of repository where the metadata is stored. Valid values are: 's3', 'azureblob'
            #     planRepositoryType: # optional, default is s3
            #     # the name of the stack corresponding to the plan file
            #     stack: # optional
            #     # the name of the dynamodb table to store metadata
            #     tableName: # optional, default is terraform-plan-storage
                      

            # Generates an execution plan for Terraform
            - name: Terraform Plan
              run: terraform plan -input=false -out=tfplan
              env:
                  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
                  TF_VAR_godaddy_api_key: ${{ secrets.GODADDY_API_KEY }} 
                  TF_VAR_godaddy_api_secret: ${{ secrets.GODADDY_API_SECRET }} 
                  TF_VAR_site_password: ${{ secrets.SITE_PASSWORD }}
                  TF_VAR_spotify_client_id: ${{ secrets.SPOTIFY_CLIENT_ID }}
                  TF_VAR_spotify_client_secret: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

          
            # On push to "main", build or change infrastructure according to Terraform configuration files
            # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
            - name: Terraform Apply
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              run: terraform apply -auto-approve -input=false tfplan
              env:
                  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
                  TF_VAR_godaddy_api_key: ${{ secrets.GODADDY_API_KEY }} 
                  TF_VAR_godaddy_api_secret: ${{ secrets.GODADDY_API_SECRET }} 
                  TF_VAR_site_password: ${{ secrets.SITE_PASSWORD }}
                  TF_VAR_spotify_client_id: ${{ secrets.SPOTIFY_CLIENT_ID }}
                  TF_VAR_spotify_client_secret: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

            # Outputs from Terraform
            - name: Export Terraform Outputs
              run: |
                echo "AZURE_APPSERVICE_PUBLISH_PROFILE_API=$(terraform output -raw app_service_publish_profile_api)" >> $GITHUB_ENV
                echo "AZURE_APPSERVICE_PUBLISH_PROFILE_WEB=$(terraform output -raw app_service_publish_profile_web)" >> $GITHUB_ENV
                echo "AZURE_APPSERVICE_CLIENTID_API=$(terraform output -raw app_service_client_id_api)" >> $GITHUB_ENV
                echo "AZURE_APPSERVICE_CLIENTID_WEB=$(terraform output -raw app_service_client_id_web)" >> $GITHUB_ENV

